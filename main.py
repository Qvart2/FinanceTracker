import json
import os
import requests
import xml.etree.ElementTree as ET
from datetime import datetime
from kivy.app import App
from kivy.lang import Builder
from kivy.uix.screenmanager import ScreenManager, Screen
from kivy.uix.label import Label
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.button import Button
from kivy.uix.textinput import TextInput
from kivy.uix.scrollview import ScrollView
from kivy.uix.popup import Popup

# ---------------------------
# –†–∞–±–æ—Ç–∞ —Å JSON (—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö)
# ---------------------------
DATA_FILE = "data.json"


def load_data():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞ JSON"""
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    else:
        return {
            "wallets": [],
            "incomes": [],
            "expenses": [],
            "categories": []
        }


def save_data(data):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª JSON"""
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

from datetime import datetime

def update_exchange_rates():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç —Å —Å–∞–π—Ç–∞ –¶–ë –†–§ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö –≤ data."""
    global data
    url = "https://www.cbr.ru/scripts/XML_daily.asp"
    try:
        response = requests.get(url, timeout=10)
        response.raise_for_status()
        xml_data = ET.fromstring(response.text)

        rates = {"RUB": 1.0}
        for valute in xml_data.findall("Valute"):
            code = valute.find("CharCode").text
            rate = float(valute.find("Value").text.replace(",", "."))
            nominal = int(valute.find("Nominal").text)
            rates[code] = rate / nominal

        data["currencies"] = rates
        data["last_rates_update"] = datetime.now().strftime("%d.%m.%Y %H:%M")
        save_data(data)
        return True
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤:", e)
        return False

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –∑–∞–≥—Ä—É–∂–∞–µ–º –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
data = load_data()


# ---------------------------
# –î–æ–ø. —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–æ—à–µ–ª—å–∫–æ–≤ (–∏–∑ main1.py)
# ---------------------------
def add_wallet(name, currency, balance):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π –∫–æ—à–µ–ª—ë–∫ –≤ –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö."""
    global data
    wallet = {"name": name, "currency": currency, "balance": balance}
    data.setdefault("wallets", []).append(wallet)
    save_data(data)


def delete_wallet(name):
    """–£–¥–∞–ª—è–µ—Ç –∫–æ—à–µ–ª—ë–∫ –ø–æ –∏–º–µ–Ω–∏."""
    global data
    data["wallets"] = [wallet for wallet in data.get("wallets", []) if wallet["name"] != name]
    save_data(data)


def calculate_total_balance():
    """–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∏—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –ø–æ –≤—Å–µ–º –∫–æ—à–µ–ª—å–∫–∞–º."""
    total_balance = {}
    for wallet in data.get("wallets", []):
        currency = wallet.get("currency")
        balance = wallet.get("balance", 0)
        try:
            balance = float(balance)
        except (TypeError, ValueError):
            balance = 0
        total_balance[currency] = total_balance.get(currency, 0) + balance
    return total_balance


# ---------------------------
# –≠–∫—Ä–∞–Ω—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
# ---------------------------
class MainMenu(Screen):
    pass


class WalletScreen(Screen):
    def on_pre_enter(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ—à–µ–ª—å–∫–æ–≤ –∏ –¥–∞—Ç—É –∫—É—Ä—Å–æ–≤ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —ç–∫—Ä–∞–Ω–∞."""
        self.update_wallet_list()
        # üü© –¥–æ–±–∞–≤—å –≤–æ—Ç —ç—Ç—É —Å—Ç—Ä–æ–∫—É:
        self.ids.last_update_label.text = f"–ö—É—Ä—Å—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {data.get('last_rates_update', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}"


    def update_rates(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç —Å —Å–∞–π—Ç–∞ –¶–ë –†–§."""
        if update_exchange_rates():
            popup = Popup(title="–£—Å–ø–µ—à–Ω–æ", content=Label(text="–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –æ–±–Ω–æ–≤–ª–µ–Ω—ã!"), size_hint=(0.6, 0.3))
            popup.open()
        else:
            popup = Popup(title="–û—à–∏–±–∫–∞", content=Label(text="–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å—ã."), size_hint=(0.6, 0.3))
            popup.open()

        self.ids.last_update_label.text = f"–ö—É—Ä—Å—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {data.get('last_rates_update', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}"

    def update_wallet_list(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ—à–µ–ª—å–∫–æ–≤ –Ω–∞ —ç–∫—Ä–∞–Ω–µ."""
        container = self.ids.wallet_list
        container.clear_widgets()

        if not data.get("wallets"):
            container.add_widget(Label(text="–°–ø–∏—Å–æ–∫ –∫–æ—à–µ–ª—å–∫–æ–≤ –ø—É—Å—Ç.", font_size="16sp", color=(0, 0, 0, 1)))
        else:
            for wallet in data["wallets"]:
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–∞–ø–∏—Å–∏
                if not all(k in wallet for k in ("name", "currency", "balance")):
                    continue

                # –í—ã—á–∏—Å–ª—è–µ–º –∫—É—Ä—Å –∏ —Ä—É–±–ª—ë–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                rate = data.get("currencies", {}).get(wallet["currency"], 1)
                try:
                    rub_value = float(wallet["balance"]) * rate
                except (TypeError, ValueError):
                    rub_value = 0.0

                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Ç–µ–∫—Å—Ç–∞
                text = f"–ò–º—è: {wallet['name']}, –ë–∞–ª–∞–Ω—Å: {wallet['balance']} {wallet['currency']} (‚âà {rub_value:.2f} RUB)"

                # –≠–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
                wallet_layout = BoxLayout(orientation="horizontal", size_hint_y=None, height=40, spacing=10, padding=[6, 6])
                wallet_label = Label(
                    text=text,
                    size_hint_x=0.8,
                    halign="left",
                    valign="middle",
                    color=(0, 0, 0, 1)
                )
                wallet_label.bind(size=lambda lbl, _: setattr(lbl, "text_size", (lbl.width, None)))

                delete_button = Button(
                    text="–£–¥–∞–ª–∏—Ç—å",
                    size_hint_x=0.2,
                    background_normal="",
                    background_color=(0.8, 0.2, 0.2, 1),
                    color=(1, 1, 1, 1),
                    on_release=lambda btn, name=wallet["name"]: self.confirm_delete_wallet(name)
                )

                wallet_layout.add_widget(wallet_label)
                wallet_layout.add_widget(delete_button)
                container.add_widget(wallet_layout)



    def show_add_wallet_form(self, *args):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–æ—Ä–º—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞."""
        from kivy.uix.spinner import Spinner

        # –°–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç: –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥
        self.CURRENCY_LABELS = {
            "RUB": "–†—É–±–ª—å (RUB)",
            "USD": "–î–æ–ª–ª–∞—Ä (USD)",
            "EUR": "–ï–≤—Ä–æ (EUR)"
        }

        box = BoxLayout(orientation="vertical", spacing=10, padding=10)

        # –ü–æ–ª–µ –¥–ª—è –∏–º–µ–Ω–∏ –∫–æ—à–µ–ª—å–∫–∞
        self.wallet_name_input = TextInput(hint_text="–ò–º—è –∫–æ—à–µ–ª—å–∫–∞", multiline=False)
        box.add_widget(self.wallet_name_input)

        # –í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç
        self.wallet_currency_spinner = Spinner(
            text="–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É",
            values=list(self.CURRENCY_LABELS.values()),
            size_hint_y=None,
            height=44
        )
        box.add_widget(self.wallet_currency_spinner)

        # –ü–æ–ª–µ –¥–ª—è –±–∞–ª–∞–Ω—Å–∞
        self.wallet_balance_input = TextInput(hint_text="–ë–∞–ª–∞–Ω—Å", multiline=False, input_filter="float")
        box.add_widget(self.wallet_balance_input)

        # –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        save_button = Button(text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", size_hint_y=None, height=44)
        save_button.bind(on_release=self.save_wallet)
        box.add_widget(save_button)

        # –û–∫–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        self.add_wallet_popup = Popup(title="–î–æ–±–∞–≤–∏—Ç—å –∫–æ—à–µ–ª—ë–∫", content=box, size_hint=(0.9, 0.6))
        self.add_wallet_popup.open()

    def save_wallet(self, instance):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤—ã–π –∫–æ—à–µ–ª—ë–∫ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫."""
        name = (self.wallet_name_input.text or "").strip()
        balance_text = (self.wallet_balance_input.text or "0").strip()
        selected_label = self.wallet_currency_spinner.text

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–¥ –≤–∞–ª—é—Ç—ã –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –Ω–∞–¥–ø–∏—Å–∏
        currency = None
        for code, label in self.CURRENCY_LABELS.items():
            if label == selected_label:
                currency = code
                break

        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        if not name or not currency:
            error_popup = Popup(title="–û—à–∏–±–∫–∞", content=Label(text="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É!"), size_hint=(0.6, 0.3))
            error_popup.open()
            return

        try:
            balance = float(balance_text)
            add_wallet(name, currency, balance)
            self.update_wallet_list()
            self.add_wallet_popup.dismiss()
        except ValueError:
            error_popup = Popup(title="–û—à–∏–±–∫–∞", content=Label(text="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –±–∞–ª–∞–Ω—Å–∞!"), size_hint=(0.6, 0.3))
            error_popup.open()


    def confirm_delete_wallet(self, name):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞."""
        self.delete_name = name
        box = BoxLayout(orientation="vertical", padding=10, spacing=10)
        box.add_widget(Label(text=f"–£–¥–∞–ª–∏—Ç—å –∫–æ—à–µ–ª—ë–∫ '{name}'?"))
        btn_layout = BoxLayout(size_hint_y=None, height=48, spacing=10)
        yes = Button(text="–î–∞")
        no = Button(text="–ù–µ—Ç")
        yes.bind(on_release=self.delete_wallet_confirmed)
        no.bind(on_release=self.delete_wallet_canceled)
        btn_layout.add_widget(yes)
        btn_layout.add_widget(no)
        box.add_widget(btn_layout)
        self.delete_popup = Popup(title="–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", content=box, size_hint=(0.6, 0.4))
        self.delete_popup.open()

    def delete_wallet_confirmed(self, instance):
        """–£–¥–∞–ª—è–µ—Ç –∫–æ—à–µ–ª—ë–∫ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."""
        delete_wallet(self.delete_name)
        self.update_wallet_list()
        self.delete_popup.dismiss()

    def delete_wallet_canceled(self, instance):
        """–û—Ç–º–µ–Ω—è–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞."""
        self.delete_popup.dismiss()

    def show_total_balance(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –ø–æ –≤—Å–µ–º –∫–æ—à–µ–ª—å–∫–∞–º."""
        total_balance = calculate_total_balance()

        if not total_balance:
            total_balance_text = "–ù–µ—Ç –∫–æ—à–µ–ª—å–∫–æ–≤ –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ –±–∞–ª–∞–Ω—Å–∞."
        else:
            total_balance_text = "–ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–∞–Ω—Å:\n"
            for currency, balance in total_balance.items():
                total_balance_text += f"{balance} {currency}\n"

        popup = Popup(title="–ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–∞–Ω—Å", content=Label(text=total_balance_text), size_hint=(0.7, 0.5))
        popup.open()


class ExpenseScreen(Screen):
    """
    –≠–∫—Ä–∞–Ω –¥–æ–±–∞–ª–µ–Ω–∏—è –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
    """
    def add_income(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–∞"""
        try:
            val = float(self.ids.sum_input.text)
        except (ValueError, TypeError):
            return
        data.setdefault("incomes", []).append({"amount": val})
        save_data(data)

    def add_expense(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞"""
        try:
            val = float(self.ids.sum_input.text)
        except (ValueError, TypeError):
            return
        data.setdefault("expenses", []).append({"amount": val})
        save_data(data)

    def list_actions(self):
        """"–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤"""
        pass

    def remove_record(self):
        """"–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏"""
        pass


class CategoryScreen(Screen):
    def on_pre_enter(self):
        self.update_category_list()

    def add_category(self, name):
        name = (name or "").strip()
        if not name:
            return
        if name not in data["categories"]:
            data["categories"].append(name)
            save_data(data)
            self.update_category_list()

    def remove_category(self, name):
        if name in data["categories"]:
            data["categories"].remove(name)
            save_data(data)
            self.update_category_list()

    def update_category_list(self):
        container = self.ids.category_list
        container.clear_widgets()

        for cat in data["categories"]:
            row = BoxLayout(
                orientation="horizontal",
                size_hint_y=None,
                height=48,
                spacing=10,
                padding=[6, 6]
            )

            # –õ–µ–π–±–ª –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            lbl = Label(
                text=cat,
                halign="left",
                valign="middle",
                size_hint_x=1,
                color=(0, 0, 0, 1),
                font_size=16
            )
            lbl.bind(
                size=lambda instance, value: setattr(instance, "text_size", (instance.width, None))
            )

            btn = Button(
                text="X",
                size_hint=(None, None),
                size=(36, 36),
                font_size=18,
                background_normal="",
                background_color=(0.85, 0.2, 0.2, 1),
                color=(1, 1, 1, 1)
            )
            btn.bind(on_release=lambda widget, c=cat: self.remove_category(c))

            row.add_widget(lbl)
            row.add_widget(btn)
            container.add_widget(row)


class StatsScreen(Screen):
    pass


# ---------------------------
# ScreenManager
# ---------------------------
class FinanceManager(ScreenManager):
    pass


# ---------------------------
# KV-—Ä–∞–∑–º–µ—Ç–∫–∞ (–∏–∑ main.py, —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º WalletScreen –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º)
# ---------------------------
kv = """
#:import rgba kivy.utils.get_color_from_hex

<StyledButton@Button>:
    size_hint_y: None
    height: 45
    background_normal: ""
    background_color: rgba("#4d6fa3")
    color: 1, 1, 1, 1
    font_size: 16
    bold: True

<StyledLabel@Label>:
    font_size: 20
    color: 0, 0, 0, 1

<TextInput>:
    background_color: 1, 1, 1, 1
    foreground_color: 0, 0, 0, 1
    padding: [10, 10]
    font_size: 16

FinanceManager:
    MainMenu:
    WalletScreen:
    ExpenseScreen:
    CategoryScreen:
    StatsScreen:

<MainMenu>:
    name: "menu"
    BoxLayout:
        orientation: "vertical"
        spacing: 15
        padding: 30
        canvas.before:
            Color:
                rgba: rgba("#F0F0F0")
            Rectangle:
                pos: self.pos
                size: self.size

        StyledLabel:
            text: "–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä"
            font_size: 28
            bold: True

        StyledButton:
            text: "–ö–æ—à–µ–ª—å–∫–∏"
            on_release: app.root.current = "wallets"

        StyledButton:
            text: "–î–æ—Ö–æ–¥—ã –∏ —Ä–∞—Å—Ö–æ–¥—ã"
            on_release: app.root.current = "expenses"

        StyledButton:
            text: "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏"
            on_release: app.root.current = "categories"

        StyledButton:
            text: "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
            on_release: app.root.current = "stats"

        StyledButton:
            text: "–í—ã—Ö–æ–¥"
            background_color: rgba("#E74C3C")
            on_release: app.stop()

<WalletScreen>:
    name: "wallets"
    BoxLayout:
        orientation: "vertical"
        spacing: 10
        padding: 20
        canvas.before:
            Color:
                rgba: rgba("#F0F0F0")
            Rectangle:
                pos: self.pos
                size: self.size

        StyledLabel:
            text: "–≠–∫—Ä–∞–Ω –∫–æ—à–µ–ª—å–∫–æ–≤"
            font_size: 22

        ScrollView:
            do_scroll_x: False
            do_scroll_y: True

            BoxLayout:
                id: wallet_list
                orientation: "vertical"
                size_hint_y: None
                height: self.minimum_height
                spacing: 5
                padding: 5

        BoxLayout:
            orientation: "horizontal"
            size_hint_y: None
            height: 50
            spacing: 10

            StyledButton:
                text: "–î–æ–±–∞–≤–∏—Ç—å –∫–æ—à–µ–ª—ë–∫"
                on_release: root.show_add_wallet_form()

            StyledButton:
                text: "–ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–∞–Ω—Å"
                on_release: root.show_total_balance()

            StyledButton:
                text: "–û–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å—ã"
                on_release: root.update_rates()

        BoxLayout:
            size_hint_y: None
            height: 25
            padding: [5, 0, 5, 0]

            Label:
                id: last_update_label
                text: "–ö—É—Ä—Å—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                font_size: 13
                color: 0.4, 0.4, 0.4, 1   # —Å–µ—Ä—ã–π —Ç–µ–∫—Å—Ç
                halign: "right"
                valign: "middle"
                text_size: self.size


        StyledButton:
            text: "–ù–∞–∑–∞–¥"
            background_color: rgba("#95A5A6")
            on_release: app.root.current = "menu"

<ExpenseScreen>:
    name: "expenses"
    BoxLayout:
        orientation: "vertical"
        spacing: 10
        padding: 20
        canvas.before:
            Color:
                rgba: rgba("#F0F0F0")
            Rectangle:
                pos: self.pos
                size: self.size

        StyledLabel:
            text: "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤"
            font_size: 22

        TextInput:
            id: sum_input
            hint_text: "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É"
            input_filter: "float"
            multiline: False
            size_hint_y: None
            height: 45

        StyledButton:
            text: "–î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥"
            on_release: root.add_income()

        StyledButton:
            text: "–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥"
            on_release: root.add_expense()

        StyledButton:
            text: "–ù–∞–∑–∞–¥"
            background_color: rgba("#95A5A6")
            on_release: app.root.current = "menu"

<CategoryScreen>:
    name: "categories"
    BoxLayout:
        orientation: "vertical"
        spacing: 10
        padding: 20
        canvas.before:
            Color:
                rgba: rgba("#F0F0F0")
            Rectangle:
                pos: self.pos
                size: self.size

        StyledLabel:
            text: "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤"
            font_size: 22

        TextInput:
            id: category_input
            hint_text: "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
            size_hint_y: None
            height: 45

        StyledButton:
            text: "–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é"
            on_release:
                root.add_category(category_input.text)
                category_input.text = ""

        StyledLabel:
            text: "–°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:"
            font_size: 18

        ScrollView:
            do_scroll_x: False
            do_scroll_y: True

            BoxLayout:
                id: category_list
                orientation: "vertical"
                size_hint_y: None
                height: self.minimum_height
                spacing: 5
                padding: 5

        StyledButton:
            text: "–ù–∞–∑–∞–¥"
            background_color: rgba("#95A5A6")
            on_release: app.root.current = "menu"

<StatsScreen>:
    name: "stats"
    BoxLayout:
        orientation: "vertical"
        spacing: 10
        padding: 20
        canvas.before:
            Color:
                rgba: rgba("#F0F0F0")
            Rectangle:
                pos: self.pos
                size: self.size

        StyledLabel:
            text: "–≠–∫—Ä–∞–Ω —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
            font_size: 22

        StyledButton:
            text: "–ù–∞–∑–∞–¥"
            background_color: rgba("#95A5A6")
            on_release: app.root.current = "menu"
"""


# ---------------------------
# –û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
# ---------------------------
class FinanceApp(App):
    def build(self):
        # –ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç
        if "currencies" not in data or not data["currencies"]:
            print("–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∑–∞–≥—Ä—É–∂–∞–µ–º —Å —Å–∞–π—Ç–∞ –¶–ë...")
            update_exchange_rates()
        else:
            # –ü–æ–ø—Ä–æ–±—É–µ–º —Ç–∏—Ö–æ –æ–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å—ã (–µ—Å–ª–∏ –µ—Å—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç)
            try:
                update_exchange_rates()
                print("–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ.")
            except Exception as e:
                print("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ:", e)

        return Builder.load_string(kv)

if __name__ == "__main__":
    FinanceApp().run()
